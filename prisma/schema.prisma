generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Thumbnails {
  id         String  @id @db.VarChar(20)
  defaultUrl String? @db.VarChar(255)
  medium     String? @db.VarChar(255)
  high       String? @db.VarChar(255)
  standard   String? @db.VarChar(255)
  maxres     String? @db.VarChar(255)
  video      Videos  @relation(fields: [id], references: [id])
}

model Videos {
  id              String       @id @db.VarChar(20)
  title           String       @db.VarChar(255)
  description     String       @db.Text
  startTime       DateTime     @db.Timestamp(0)
  createdAt       DateTime     @default(now()) @db.Timestamp(0)
  songConfirm     Boolean      @default(false)
  checkSongVtuber Boolean      @default(false)
  dayCount        DayCount[]
  songVtuber      SongVtuber[]
  thumbnail       Thumbnails?
}

model Vtuber {
  id          String       @id @db.VarChar(30)
  name        String       @db.VarChar(255)
  readname    String       @db.VarChar(255)
  affiliation String       @db.VarChar(255)
  birthday    String?      @db.Char(4)
  vtuberImage       VtuberImage[]
  songVtuber  SongVtuber[]
}

model VtuberImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(0)
  type      String   @db.VarChar(255) @default("icon")
  url       String   @db.VarChar(255)
  poster    String   @db.VarChar(255)
  channelId String   @db.VarChar(30)
  vtuber    Vtuber   @relation(fields: [channelId], references: [id])

  @@index([channelId], name: "image_channelId")
}

model SongVtuber {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(0)
  videoId   String   @db.VarChar(20)
  channelId String   @db.VarChar(30)
  role      String   @db.VarChar(20)
  vtuber    Vtuber   @relation(fields: [channelId], references: [id])
  videos    Videos   @relation(fields: [videoId], references: [id])

  @@index([channelId], name: "channelId")
  @@index([videoId], name: "videoId")
}

model DayCount {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  videoId      String   @db.VarChar(20)
  viewCount    Int?     @db.Integer
  likeCount    Int?     @db.Integer
  dislikeCount Int?     @db.Integer
  commentCount Int?     @db.Integer
  videos       Videos   @relation(fields: [videoId], references: [id])

  @@index([videoId], name: "count_videoId")
}
